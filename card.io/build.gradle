apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    mavenCentral()
}

def getBuildVersion = { ->
//    "git describe --match=*[0-9]*.[0-9]*.*[0-9] --tags --dirty --always".execute().text.trim()
}

ext {
    build_time = new Date().format("MM/dd/yyyy HH:mm:ss Z")
    build_year = new Date().format("yyyy")
    product_name = "card.io-Android-SDK"
    product_version = getBuildVersion()
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion rootProject.ext.targetSdkVersion

        buildConfigField "String", "PRODUCT_NAME", "\"${product_name}\""
        buildConfigField "String", "PRODUCT_VERSION", "\"${product_version}\""
        buildConfigField "String", "BUILD_TIME", "\"${build_time}\""

        consumerProguardFiles 'release-proguard.cfg'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    resourcePrefix 'cio_'

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir 'src/main/libs'
    }

    buildTypes {
        debug {
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-build.cfg'
        }
    }

//    task cleanNative(type: Exec, description: 'Clean JNI object files') {
//        commandLine "$android.ndkDirectory/ndk-build",
//                '-C', file('src/main/jni').absolutePath,
//                'clean'
//    }
//    clean.dependsOn cleanNative
//
//    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
//        commandLine "$android.ndkDirectory/ndk-build",
//                '-C', file('src/main/jni').absolutePath,
//                '-j', Runtime.runtime.availableProcessors(),
//                'all'
//    }
//    tasks.withType(JavaCompile) {
//        compileTask -> compileTask.dependsOn buildNative
//    }
//
//    tasks.whenTaskAdded { theTask ->
//        if (theTask.name == "packageReleaseJniLibs"
//                || theTask.name == "packageDebugJniLibs") {
//            theTask.dependsOn(buildNative)
//        }
//    }
}

dependencies {
    testCompile "junit:junit:4.12"
    testCompile "org.robolectric:robolectric:3.1.2"
}

